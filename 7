type 'a t = 'a list =
  | []
  | (::) of 'a * 'a t

let length =
  let rec len_aux acc = function
  | [] -> acc
  | _x::s -> len_aux (acc + 1) s
  in
  fun l -> len_aux 0 l

let cons x l = x::l

let hd = function
  | [] -> raise (Failure "yikes")
  | x::_r -> x

let tl = function
  | [] -> raise (Invalid_argument "Invalid_argument")
  | _x::r -> r

let nth_opt l i =
  if i < 0 then
    raise (Invalid_argument "Nth_opt")
  else
    let rec nth_aux = function
      | [], _n -> None
      | x::_r, 0 -> x
      | x::r, n -> nth_aux r (n - 1)
    in nth_aux l i
(* hd, tl, nth_opt, nth_exn, nth *)
